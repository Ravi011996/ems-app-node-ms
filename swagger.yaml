openapi: 3.0.0
info:
  title: EMS API
  description: API documentation for user and expense 
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
tags:
  - name: Auth
    description: Authentication related endpoints

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john_doe@example.com"
                password:
                  type: string
                  format: password
                  example: "StrongPassword123"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
  /auth/login:
    post:
      summary: Log in an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john_doe@example.com"
                password:
                  type: string
                  format: password
                  example: "StrongPassword123"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User logged in successfully"
                  token:
                    type: string
                    example: "jwt.token.here"
        401:
          description: Unauthorized, invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
  /expenses:
    get:
      summary: Retrieve all expenses for the authenticated user
      tags:
        - Expenses
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully retrieved expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "60c72b2f5f1b2c001c8e4a3e"
                    title:
                      type: string
                      example: "Rent"
                    amount:
                      type: number
                      example: 1200
                    category:
                      type: string
                      example: "Housing"
                    date:
                      type: string
                      format: date
                      example: "2024-01-01"
                    userId:
                      type: string
                      example: "60c72b2f5f1b2c001c8e4a3d"
        401:
          description: Unauthorized, user not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
    post:
      summary: Create a new expense
      tags:
        - Expenses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Rent"
                amount:
                  type: number
                  example: 1200
                category:
                  type: string
                  example: "Housing"
                date:
                  type: string
                  format: date
                  example: "2024-01-01"
      responses:
        201:
          description: Successfully created expense
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Expense created successfully"
                  expense:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60c72b2f5f1b2c001c8e4a3e"
                      title:
                        type: string
                        example: "Rent"
                      amount:
                        type: number
                        example: 1200
                      category:
                        type: string
                        example: "Housing"
                      date:
                        type: string
                        format: date
                        example: "2024-01-01"
                      userId:
                        type: string
                        example: "60c72b2f5f1b2c001c8e4a3d"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error"
        401:
          description: Unauthorized, user not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"
  /expenses/{id}:
    put:
      summary: Update an existing expense
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the expense to update
          schema:
            type: string
            example: "60c72b2f5f1b2c001c8e4a3e"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Rent"
                amount:
                  type: number
                  example: 1300
                category:
                  type: string
                  example: "Housing"
                date:
                  type: string
                  format: date
                  example: "2024-01-05"
      responses:
        200:
          description: Successfully updated expense
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Expense updated successfully"
                  expense:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60c72b2f5f1b2c001c8e4a3e"
                      title:
                        type: string
                        example: "Rent"
                      amount:
                        type: number
                        example: 1300
                      category:
                        type: string
                        example: "Housing"
                      date:
                        type: string
                        format: date
                        example: "2024-01-05"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error"
        401:
          description: Unauthorized, user not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        404:
          description: Expense not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Expense not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

    delete:
      summary: Delete an existing expense
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the expense to delete
          schema:
            type: string
            example: "60c72b2f5f1b2c001c8e4a3e"
      responses:
        200:
          description: Successfully deleted expense
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Expense deleted successfully"
        401:
          description: Unauthorized, user not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        404:
          description: Expense not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Expense not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT